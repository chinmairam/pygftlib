#!/usr/bin/python3
import argparse
import logging
import os, pwd, grp, sys
import pygftlib
from pygftlib import misc
from pygftlib.protocol import Sender, Receiver

logger = pygftlib.misc.create_logger()


def logo(module=None, license='MIT'):
    print(r"""
                        __ _   _ _ _     
 _ __  _   _  __ _ / _| |_| (_) |__  
| '_ \| | | |/ _` | |_| __| | | '_ \ 
| |_) | |_| | (_| |  _| |_| | | |_) |
| .__/ \__, |\__, |_|  \__|_|_|_.__/ 
|_|    |___/ |___/                   

    Version:     {}
    Module:      {}
    License:     {}
    
    Credits:     Made by Abhinav Saxena <xandfury@gmail.com>.
                 Special thanks to Daniel Haslinger and Team Honeynet for letting me do this!
    """.format(pygftlib.__version__, module, license))


class AgrsParse(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Simple Gevent based File Sharing Library',
            usage='''pygftlib <command> [<args>]

There are two modes in which pygftlib. The inner workings are like a protocol in itself. 
Hence in order to transfer files -- You need both sender and receiver
   send       Client mode. One client can send only one file at a time
   receive    Server mode. Capable of handling multiple concurrent connections at the same time
''')
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def send(self):
        parser = argparse.ArgumentParser(
            description='Send files to a compatible pygftlib server')
        # prefixing the argument with -- means it's optional
        parser.add_argument('filename', help='name of the file that has to be transferred')
        parser.add_argument('--host',
                            help='remote address of the sender(server) you want to send the file to',
                            default='127.0.0.1')
        parser.add_argument('--port', help='port number', default=12345, type=int)
        args = parser.parse_args(sys.argv[2:])
        logo(module='Sender Module. Please make sure Receiver/Server is already running')
        if os.path.isfile(args.filename):
            logger.info('Found file {}'.format(args.filename))
        else:
            logger.error('Could not find file: {}'.format(args.filename))
            sys.exit(3)
        # TODO: validate host_ip and port
        sender = Sender(args.filename)
        try:
            logger.info('Starting Client (Sender) file upload to Server {}:{}'.format(args.host, args.port))
            sender.start(args.host, args.port)
        except KeyboardInterrupt:
            logger.info('Stopping Client (Sender) file upload to Server {}:{}'.format(args.host, args.port))
            sender.stop()

    def receive(self):
        parser = argparse.ArgumentParser(
            description='Start a server to receive files from a compatible client')
        # NOT prefixing the argument with -- means it's not optional
        parser.add_argument('--host', help='Server (Receiver) bind address', default='127.0.0.1')
        parser.add_argument('--port', help='Server (Receiver) bind port', default=12345, type=int)
        args = parser.parse_args(sys.argv[2:])
        logo(module='Receiver Module. Please use compatible client to connect with this!')
        # TODO: validate host_ip and port
        receiver = Receiver()
        try:
            logger.info('Starting Receiver/Server on {}:{}'.format(args.host, args.port))
            receiver.start(args.host, args.port)
        except KeyboardInterrupt:
            logger.info('Stopping Receiver/Server on {}:{}'.format(args.host, args.port))
            receiver.stop()


if __name__ == '__main__':
    # TODO: setup logger correctly
    # Command line_options to a nifty cli
    logo()
    AgrsParse()
